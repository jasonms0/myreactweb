{"ast":null,"code":"import \"antd/lib/breadcrumb/style/css\";\nimport _Breadcrumb from \"antd/lib/breadcrumb\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nvar __jsx = React.createElement;\nimport \"../static/less/live.less\";\nimport \"../static/css/font.css\";\nimport \"../static/css/font2.css\";\nimport fetch from 'isomorphic-unfetch';\nimport React from 'react';\nimport Head from 'next/head';\nimport Nav from \"../components/Nav\";\nimport Footer from \"../components/Footer\"; // import {fetchget} from '../utils/myfetch'\n\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nconst {\n  Meta\n} = _Card;\n\nclass Live extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getnextpage\", async page => {\n      let res = await fetch(\"http://formywei.club:9191/api/getlive/1/\" + page);\n      let data = await res.json();\n      let message = data.message; // console.log(message)\n\n      this.setState(state => ({\n        mingsu: [...message]\n      }), () => {});\n      let res1 = await fetch(\"http://formywei.club:9191/api/getlive/2/\" + page);\n      let data1 = await res1.json();\n      let message1 = data1.message; // console.log(message1)\n\n      this.setState(state => ({\n        jiudian: [...message1]\n      }), () => {});\n    });\n\n    this.state = {\n      key: 'live',\n      page: 1,\n      actived: 'actived',\n      beforeactive: 'beforeactive',\n      jiudian: [],\n      mingsu: []\n    };\n  }\n\n  async componentDidMount() {\n    let res = await fetch(\"http://formywei.club:9191/api/getlive/1/1\");\n    let data = await res.json();\n    let message = data.message; // console.log(message)\n\n    this.setState(state => ({\n      mingsu: [...message]\n    }), () => {});\n    let res1 = await fetch(\"http://formywei.club:9191/api/getlive/2/1\");\n    let data1 = await res1.json();\n    let message1 = data1.message; // console.log(message1)\n\n    this.setState(state => ({\n      jiudian: [...message1]\n    }), () => {});\n  }\n\n  getming() {\n    return this.state.mingsu.length && this.state.mingsu.map((item, idx) => {\n      return __jsx(Link, {\n        href: `/minsu?id=${item.id}`,\n        key: idx\n      }, __jsx(\"div\", null, __jsx(\"img\", {\n        src: item.img\n      }), __jsx(\"span\", null, item.lname)));\n    });\n  }\n\n  getjiu() {\n    return this.state.mingsu.length && this.state.jiudian.map((item, idx) => {\n      return __jsx(Link, {\n        href: `/hotel?id=${item.id}`,\n        key: idx\n      }, __jsx(\"li\", null, __jsx(\"div\", null, __jsx(\"img\", {\n        src: item.img\n      })), __jsx(\"p\", null, item.lname)));\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"bg\"\n    }, __jsx(Nav, {\n      current: this.state.key\n    }), __jsx(Head, null, __jsx(\"title\", null, \"\\u745E\\u827E\\u5BA2\\u7279\")), __jsx(\"div\", {\n      className: \"context\"\n    }, __jsx(\"img\", {\n      src: \"../static/images/aboutimg.png\"\n    }), __jsx(\"div\", {\n      className: \"location\"\n    }, __jsx(_Breadcrumb, null, __jsx(_Breadcrumb.Item, null, __jsx(\"a\", {\n      className: \"font2\"\n    }, \"\\u65C5\\u6E38\\u4F4F\\u5BBF\")))), __jsx(\"div\", {\n      className: \"title2 font1\"\n    }, \"\\u6C11\\u5BBF\\u4F53\\u9A8C\"), __jsx(\"div\", {\n      className: \"hotel1\"\n    }, this.getming()), __jsx(\"div\", {\n      className: \"title2 font1\"\n    }, \"\\u661F\\u7EA7\\u9152\\u5E97\"), __jsx(\"ul\", {\n      className: \"hotel2\"\n    }, this.getjiu())), __jsx(\"div\", {\n      className: \"pages\"\n    }, __jsx(\"div\", {\n      className: \"page\"\n    }, __jsx(\"div\", {\n      className: \"num\",\n      onClick: () => {\n        this.getnextpage(1);\n      }\n    }, \"1\")), __jsx(\"div\", {\n      className: \"page\"\n    }, __jsx(\"div\", {\n      className: \"num\",\n      onClick: () => {\n        this.getnextpage(2);\n      }\n    }, \"2\"))), __jsx(Footer, null));\n  }\n\n}\n\nexport default withRouter(Live);","map":null,"metadata":{},"sourceType":"module"}