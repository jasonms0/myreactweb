{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime-corejs2/helpers/slicedToArray\");\n\nvar _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nvar _Object$assign = require(\"@babel/runtime-corejs2/core-js/object/assign\");\n\nvar _classCallCheck = require(\"@babel/runtime-corejs2/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime-corejs2/helpers/createClass\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar url_1 = require(\"url\");\n\nvar mitt_1 = __importDefault(require(\"../mitt\"));\n\nvar utils_1 = require(\"../utils\");\n\nvar rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\n\nvar is_dynamic_1 = require(\"./utils/is-dynamic\");\n\nvar route_matcher_1 = require(\"./utils/route-matcher\");\n\nvar route_regex_1 = require(\"./utils/route-regex\");\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\n\nvar Router =\n/*#__PURE__*/\nfunction () {\n  function Router(pathname, query, as, _ref) {\n    var _this = this;\n\n    var initialProps = _ref.initialProps,\n        pageLoader = _ref.pageLoader,\n        App = _ref.App,\n        wrapApp = _ref.wrapApp,\n        Component = _ref.Component,\n        err = _ref.err,\n        subscription = _ref.subscription;\n\n    _classCallCheck(this, Router);\n\n    this.onPopState = function (e) {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        var _pathname = _this.pathname,\n            _query = _this.query;\n\n        _this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname: _pathname,\n          query: _query\n        }), utils_1.getURL());\n\n        return;\n      } // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (e.state && _this.isSsr && e.state.url === _this.pathname && e.state.as === _this.asPath) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (_this._bps && !_this._bps(e.state)) {\n        return;\n      }\n\n      var _e$state = e.state,\n          url = _e$state.url,\n          as = _e$state.as,\n          options = _e$state.options;\n\n      if (true) {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n\n      _this.replace(url, as, options);\n    }; // represents the current component key\n\n\n    this.route = toRoute(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component: Component,\n        props: initialProps,\n        err: err\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    // @ts-ignore backwards compatibility\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    this.asPath = // @ts-ignore this is temporarily global (attached to window)\n    is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n\n    if (true) {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname: pathname,\n        query: query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n    }\n  } // @deprecated backwards compatibility even though it's a private method.\n\n\n  _createClass(Router, [{\n    key: \"update\",\n    value: function update(route, mod) {\n      var Component = mod[\"default\"] || mod;\n      var data = this.components[route];\n\n      if (!data) {\n        throw new Error(\"Cannot update unavailable route: \".concat(route));\n      }\n\n      var newData = _Object$assign({}, data, {\n        Component: Component\n      });\n\n      this.components[route] = newData; // pages/_app.js updated\n\n      if (route === '/_app') {\n        this.notify(this.components[this.route]);\n        return;\n      }\n\n      if (route === this.route) {\n        this.notify(newData);\n      }\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n\n  }, {\n    key: \"back\",\n    value: function back() {\n      window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(url) {\n      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n\n  }, {\n    key: \"replace\",\n    value: function replace(url) {\n      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.change('replaceState', url, as, options);\n    }\n  }, {\n    key: \"change\",\n    value: function change(method, _url, _as, options) {\n      var _this2 = this;\n\n      return new _Promise(function (resolve, reject) {\n        if (!options._h) {\n          _this2.isSsr = false;\n        } // marking route changes as a navigation start entry\n\n\n        if (utils_1.SUPPORTS_PERFORMANCE_USER_TIMING) {\n          performance.mark('routeChange');\n        } // If url and as provided as an object representation,\n        // we'll format them into the string version here.\n\n\n        var url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n        var as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as; // Add the ending slash to the paths. So, we can serve the\n        // \"<page>/index.html\" directly for the SSR page.\n\n        if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n          // @ts-ignore this is temporarily global (attached to window)\n          if (__NEXT_DATA__.nextExport) {\n            as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n          }\n        }\n\n        _this2.abortComponentLoad(as); // If the url change is only related to a hash change\n        // We should not proceed. We should only change the state.\n        // WARNING: `_h` is an internal option for handing Next.js client-side\n        // hydration. Your app should _never_ use this property. It may change at\n        // any time without notice.\n\n\n        if (!options._h && _this2.onlyAHashChange(as)) {\n          _this2.asPath = as;\n          Router.events.emit('hashChangeStart', as);\n\n          _this2.changeState(method, url, as);\n\n          _this2.scrollToHash(as);\n\n          Router.events.emit('hashChangeComplete', as);\n          return resolve(true);\n        }\n\n        var _url_1$parse = url_1.parse(url, true),\n            pathname = _url_1$parse.pathname,\n            query = _url_1$parse.query,\n            protocol = _url_1$parse.protocol;\n\n        if (!pathname || protocol) {\n          if (true) {\n            throw new Error(\"Invalid href passed to router: \".concat(url, \" https://err.sh/zeit/next.js/invalid-href-passed\"));\n          }\n\n          return resolve(false);\n        } // If asked to change the current URL we should reload the current page\n        // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n        // We also need to set the method = replaceState always\n        // as this should not go into the history (That's how browsers work)\n        // We should compare the new asPath to the current asPath, not the url\n\n\n        if (!_this2.urlIsNew(as)) {\n          method = 'replaceState';\n        } // @ts-ignore pathname is always a string\n\n\n        var route = toRoute(pathname);\n        var _options$shallow = options.shallow,\n            shallow = _options$shallow === void 0 ? false : _options$shallow;\n\n        if (is_dynamic_1.isDynamicRoute(route)) {\n          var _url_1$parse2 = url_1.parse(as),\n              asPathname = _url_1$parse2.pathname;\n\n          var routeMatch = route_matcher_1.getRouteMatcher(route_regex_1.getRouteRegex(route))(asPathname);\n\n          if (!routeMatch) {\n            var error = \"The provided `as` value (\".concat(asPathname, \") is incompatible with the `href` value (\").concat(route, \"). \") + \"Read more: https://err.sh/zeit/next.js/incompatible-href-as\";\n\n            if (true) {\n              throw new Error(error);\n            } else {\n              console.error(error);\n            }\n\n            return resolve(false);\n          } // Merge params into `query`, overwriting any specified in search\n\n\n          _Object$assign(query, routeMatch);\n        }\n\n        Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result\n        // @ts-ignore pathname is always a string\n\n        _this2.getRouteInfo(route, pathname, query, as, shallow).then(function (routeInfo) {\n          var error = routeInfo.error;\n\n          if (error && error.cancelled) {\n            return resolve(false);\n          }\n\n          Router.events.emit('beforeHistoryChange', as);\n\n          _this2.changeState(method, url, as, options);\n\n          var hash = window.location.hash.substring(1);\n\n          if (true) {\n            var appComp = _this2.components['/_app'].Component;\n            window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n          } // @ts-ignore pathname is always defined\n\n\n          _this2.set(route, pathname, query, as, _Object$assign({}, routeInfo, {\n            hash: hash\n          }));\n\n          if (error) {\n            Router.events.emit('routeChangeError', error, as);\n            throw error;\n          }\n\n          Router.events.emit('routeChangeComplete', as);\n          return resolve(true);\n        }, reject);\n      });\n    }\n  }, {\n    key: \"changeState\",\n    value: function changeState(method, url, as) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (true) {\n        if (typeof window.history === 'undefined') {\n          console.error(\"Warning: window.history is not available.\");\n          return;\n        } // @ts-ignore method should always exist on history\n\n\n        if (typeof window.history[method] === 'undefined') {\n          console.error(\"Warning: window.history.\".concat(method, \" is not available\"));\n          return;\n        }\n      }\n\n      if (method !== 'pushState' || utils_1.getURL() !== as) {\n        // @ts-ignore method should always exist on history\n        window.history[method]({\n          url: url,\n          as: as,\n          options: options\n        }, null, as);\n      }\n    }\n  }, {\n    key: \"getRouteInfo\",\n    value: function getRouteInfo(route, pathname, query, as) {\n      var _this3 = this;\n\n      var shallow = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible\n      // If the route is already rendered on the screen.\n\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return _Promise.resolve(cachedRouteInfo);\n      }\n\n      return new _Promise(function (resolve, reject) {\n        if (cachedRouteInfo) {\n          return resolve(cachedRouteInfo);\n        }\n\n        _this3.fetchComponent(route).then(function (Component) {\n          return resolve({\n            Component: Component\n          });\n        }, reject);\n      }).then(function (routeInfo) {\n        var Component = routeInfo.Component;\n\n        if (true) {\n          var _require = require('react-is'),\n              isValidElementType = _require.isValidElementType;\n\n          if (!isValidElementType(Component)) {\n            throw new Error(\"The default export is not a React Component in page: \\\"\".concat(pathname, \"\\\"\"));\n          }\n        }\n\n        return new _Promise(function (resolve, reject) {\n          // we provide AppTree later so this needs to be `any`\n          _this3.getInitialProps(Component, {\n            pathname: pathname,\n            query: query,\n            asPath: as\n          }).then(function (props) {\n            routeInfo.props = props;\n            _this3.components[route] = routeInfo;\n            resolve(routeInfo);\n          }, reject);\n        });\n      })[\"catch\"](function (err) {\n        return new _Promise(function (resolve) {\n          if (err.code === 'PAGE_LOAD_ERROR') {\n            // If we can't load the page it could be one of following reasons\n            //  1. Page doesn't exists\n            //  2. Page does exist in a different zone\n            //  3. Internal error while loading the page\n            // So, doing a hard reload is the proper way to deal with this.\n            window.location.href = as; // Changing the URL doesn't block executing the current code path.\n            // So, we need to mark it as a cancelled error and stop the routing logic.\n\n            err.cancelled = true; // @ts-ignore TODO: fix the control flow here\n\n            return resolve({\n              error: err\n            });\n          }\n\n          if (err.cancelled) {\n            // @ts-ignore TODO: fix the control flow here\n            return resolve({\n              error: err\n            });\n          }\n\n          resolve(_this3.fetchComponent('/_error').then(function (Component) {\n            var routeInfo = {\n              Component: Component,\n              err: err\n            };\n            return new _Promise(function (resolve) {\n              _this3.getInitialProps(Component, {\n                err: err,\n                pathname: pathname,\n                query: query\n              }).then(function (props) {\n                routeInfo.props = props;\n                routeInfo.error = err;\n                resolve(routeInfo);\n              }, function (gipErr) {\n                console.error('Error in error page `getInitialProps`: ', gipErr);\n                routeInfo.error = err;\n                routeInfo.props = {};\n                resolve(routeInfo);\n              });\n            });\n          }));\n        });\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(route, pathname, query, as, data) {\n      this.route = route;\n      this.pathname = pathname;\n      this.query = query;\n      this.asPath = as;\n      this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n\n  }, {\n    key: \"beforePopState\",\n    value: function beforePopState(cb) {\n      this._bps = cb;\n    }\n  }, {\n    key: \"onlyAHashChange\",\n    value: function onlyAHashChange(as) {\n      if (!this.asPath) return false;\n\n      var _this$asPath$split = this.asPath.split('#'),\n          _this$asPath$split2 = _slicedToArray(_this$asPath$split, 2),\n          oldUrlNoHash = _this$asPath$split2[0],\n          oldHash = _this$asPath$split2[1];\n\n      var _as$split = as.split('#'),\n          _as$split2 = _slicedToArray(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same\n\n\n      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n        return true;\n      } // If the urls are change, there's more than a hash change\n\n\n      if (oldUrlNoHash !== newUrlNoHash) {\n        return false;\n      } // If the hash has changed, then it's a hash only change.\n      // This check is necessary to handle both the enter and\n      // leave hash === '' cases. The identity case falls through\n      // and is treated as a next reload.\n\n\n      return oldHash !== newHash;\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash(as) {\n      var _as$split3 = as.split('#'),\n          _as$split4 = _slicedToArray(_as$split3, 2),\n          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value\n\n\n      if (hash === '') {\n        window.scrollTo(0, 0);\n        return;\n      } // First we check if the element by id is found\n\n\n      var idEl = document.getElementById(hash);\n\n      if (idEl) {\n        idEl.scrollIntoView();\n        return;\n      } // If there's no element with the id, we check the `name` property\n      // To mirror browsers\n\n\n      var nameEl = document.getElementsByName(hash)[0];\n\n      if (nameEl) {\n        nameEl.scrollIntoView();\n      }\n    }\n  }, {\n    key: \"urlIsNew\",\n    value: function urlIsNew(asPath) {\n      return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch `page` code, you may wait for the data during `page` rendering.\n     * This feature only works in production!\n     * @param url of prefetched `page`\n     */\n\n  }, {\n    key: \"prefetch\",\n    value: function prefetch(url) {\n      var _this4 = this;\n\n      return new _Promise(function (resolve, reject) {\n        var _url_1$parse3 = url_1.parse(url),\n            pathname = _url_1$parse3.pathname,\n            protocol = _url_1$parse3.protocol;\n\n        if (!pathname || protocol) {\n          if (true) {\n            throw new Error(\"Invalid href passed to router: \".concat(url, \" https://err.sh/zeit/next.js/invalid-href-passed\"));\n          }\n\n          return;\n        } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n\n        if (true) return; // @ts-ignore pathname is always defined\n\n        var route = toRoute(pathname);\n\n        _this4.pageLoader.prefetch(route).then(resolve, reject);\n      });\n    }\n  }, {\n    key: \"fetchComponent\",\n    value: function fetchComponent(route) {\n      var cancelled, cancel, Component, error;\n      return _regeneratorRuntime.async(function fetchComponent$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              cancelled = false;\n\n              cancel = this.clc = function () {\n                cancelled = true;\n              };\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this.pageLoader.loadPage(route));\n\n            case 4:\n              Component = _context.sent;\n\n              if (!cancelled) {\n                _context.next = 9;\n                break;\n              }\n\n              error = new Error(\"Abort fetching component for route: \\\"\".concat(route, \"\\\"\"));\n              error.cancelled = true;\n              throw error;\n\n            case 9:\n              if (cancel === this.clc) {\n                this.clc = null;\n              }\n\n              return _context.abrupt(\"return\", Component);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"getInitialProps\",\n    value: function getInitialProps(Component, ctx) {\n      var cancelled, cancel, App, props, status, _url_1$parse4, pathname, AppTree, err;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              cancelled = false;\n\n              cancel = function cancel() {\n                cancelled = true;\n              };\n\n              this.clc = cancel;\n              App = this.components['/_app'].Component;\n\n              if (!Component.__NEXT_SPR) {\n                _context2.next = 12;\n                break;\n              }\n\n              // pathname should have leading slash\n              _url_1$parse4 = url_1.parse(ctx.asPath || ctx.pathname), pathname = _url_1$parse4.pathname;\n              pathname = !pathname || pathname === '/' ? '/index' : pathname;\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(fetch( // @ts-ignore __NEXT_DATA__\n              \"/_next/data/\".concat(__NEXT_DATA__.buildId).concat(pathname, \".json\")).then(function (res) {\n                if (!res.ok) {\n                  status = res.status;\n                  throw new Error('failed to load prerender data');\n                }\n\n                return res.json();\n              })[\"catch\"](function (err) {\n                console.error(\"Failed to load data\", status, err);\n                window.location.href = pathname;\n                return new _Promise(function () {});\n              }));\n\n            case 9:\n              props = _context2.sent;\n              _context2.next = 17;\n              break;\n\n            case 12:\n              AppTree = this._wrapApp(App);\n              ctx.AppTree = AppTree;\n              _context2.next = 16;\n              return _regeneratorRuntime.awrap(utils_1.loadGetInitialProps(App, {\n                AppTree: AppTree,\n                Component: Component,\n                router: this,\n                ctx: ctx\n              }));\n\n            case 16:\n              props = _context2.sent;\n\n            case 17:\n              if (cancel === this.clc) {\n                this.clc = null;\n              }\n\n              if (!cancelled) {\n                _context2.next = 22;\n                break;\n              }\n\n              err = new Error('Loading initial props cancelled');\n              err.cancelled = true;\n              throw err;\n\n            case 22:\n              return _context2.abrupt(\"return\", props);\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"abortComponentLoad\",\n    value: function abortComponentLoad(as) {\n      if (this.clc) {\n        var e = new Error('Route Cancelled');\n        e.cancelled = true;\n        Router.events.emit('routeChangeError', e, as);\n        this.clc();\n        this.clc = null;\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(data) {\n      this.sub(data, this.components['/_app'].Component);\n    }\n  }], [{\n    key: \"_rewriteUrlForNextExport\",\n    value: function _rewriteUrlForNextExport(url) {\n      return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n    }\n  }]);\n\n  return Router;\n}();\n\nRouter.events = mitt_1[\"default\"]();\nexports[\"default\"] = Router;","map":{"version":3,"sources":["E:/myreactweb/node_modules/next/dist/next-server/lib/router/router.js"],"names":["__importDefault","mod","__esModule","exports","value","url_1","require","mitt_1","utils_1","rewrite_url_for_export_1","is_dynamic_1","route_matcher_1","route_regex_1","toRoute","path","replace","Router","pathname","query","as","initialProps","pageLoader","App","wrapApp","Component","err","subscription","onPopState","e","state","changeState","formatWithValidation","getURL","isSsr","url","asPath","_bps","options","console","warn","route","components","props","events","isDynamicRoute","__NEXT_DATA__","autoExport","sub","clc","_wrapApp","window","addEventListener","data","Error","newData","notify","location","reload","history","back","change","method","_url","_as","resolve","reject","_h","SUPPORTS_PERFORMANCE_USER_TIMING","performance","mark","process","env","__NEXT_EXPORT_TRAILING_SLASH","nextExport","rewriteUrlForNextExport","abortComponentLoad","onlyAHashChange","emit","scrollToHash","parse","protocol","urlIsNew","shallow","asPathname","routeMatch","getRouteMatcher","getRouteRegex","error","getRouteInfo","then","routeInfo","cancelled","hash","substring","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","cachedRouteInfo","fetchComponent","isValidElementType","code","href","gipErr","cb","split","oldUrlNoHash","oldHash","newUrlNoHash","newHash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","cancel","loadPage","ctx","__NEXT_SPR","fetch","buildId","res","ok","status","json","AppTree","loadGetInitialProps","router"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nconst rewrite_url_for_export_1 = require(\"./rewrite-url-for-export\");\nconst is_dynamic_1 = require(\"./utils/is-dynamic\");\nconst route_matcher_1 = require(\"./utils/route-matcher\");\nconst route_regex_1 = require(\"./utils/route-regex\");\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, wrapApp, Component, err, subscription, }) {\n        this.onPopState = (e) => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (e.state &&\n                this.isSsr &&\n                e.state.url === this.pathname &&\n                e.state.as === this.asPath) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = { Component, props: initialProps, err };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        // @ts-ignore backwards compatibility\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        // if auto prerendered and dynamic route wait to update asPath\n        // until after mount to prevent hydration mismatch\n        this.asPath =\n            // @ts-ignore this is temporarily global (attached to window)\n            is_dynamic_1.isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as;\n        this.sub = subscription;\n        this.clc = null;\n        this._wrapApp = wrapApp;\n        // make sure to ignore extra popState in safari on navigating\n        // back from external site\n        this.isSsr = true;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n        }\n    }\n    // @deprecated backwards compatibility even though it's a private method.\n    static _rewriteUrlForNextExport(url) {\n        return rewrite_url_for_export_1.rewriteUrlForNextExport(url);\n    }\n    update(route, mod) {\n        const Component = mod.default || mod;\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign({}, data, { Component });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Go back in history\n     */\n    back() {\n        window.history.back();\n    }\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    change(method, _url, _as, options) {\n        return new Promise((resolve, reject) => {\n            if (!options._h) {\n                this.isSsr = false;\n            }\n            // marking route changes as a navigation start entry\n            if (utils_1.SUPPORTS_PERFORMANCE_USER_TIMING) {\n                performance.mark('routeChange');\n            }\n            // If url and as provided as an object representation,\n            // we'll format them into the string version here.\n            const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n            // Add the ending slash to the paths. So, we can serve the\n            // \"<page>/index.html\" directly for the SSR page.\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n                // @ts-ignore this is temporarily global (attached to window)\n                if (__NEXT_DATA__.nextExport) {\n                    as = rewrite_url_for_export_1.rewriteUrlForNextExport(as);\n                }\n            }\n            this.abortComponentLoad(as);\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            // WARNING: `_h` is an internal option for handing Next.js client-side\n            // hydration. Your app should _never_ use this property. It may change at\n            // any time without notice.\n            if (!options._h && this.onlyAHashChange(as)) {\n                this.asPath = as;\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, as);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return resolve(true);\n            }\n            const { pathname, query, protocol } = url_1.parse(url, true);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return resolve(false);\n            }\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!this.urlIsNew(as)) {\n                method = 'replaceState';\n            }\n            // @ts-ignore pathname is always a string\n            const route = toRoute(pathname);\n            const { shallow = false } = options;\n            if (is_dynamic_1.isDynamicRoute(route)) {\n                const { pathname: asPathname } = url_1.parse(as);\n                const routeMatch = route_matcher_1.getRouteMatcher(route_regex_1.getRouteRegex(route))(asPathname);\n                if (!routeMatch) {\n                    const error = `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` +\n                        `Read more: https://err.sh/zeit/next.js/incompatible-href-as`;\n                    if (process.env.NODE_ENV !== 'production') {\n                        throw new Error(error);\n                    }\n                    else {\n                        console.error(error);\n                    }\n                    return resolve(false);\n                }\n                // Merge params into `query`, overwriting any specified in search\n                Object.assign(query, routeMatch);\n            }\n            Router.events.emit('routeChangeStart', as);\n            // If shallow is true and the route exists in the router cache we reuse the previous result\n            // @ts-ignore pathname is always a string\n            this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve(false);\n                }\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, as, options);\n                const hash = window.location.hash.substring(1);\n                if (process.env.NODE_ENV !== 'production') {\n                    const appComp = this.components['/_app'].Component;\n                    window.next.isPrerendered =\n                        appComp.getInitialProps === appComp.origGetInitialProps &&\n                            !routeInfo.Component.getInitialProps;\n                }\n                // @ts-ignore pathname is always defined\n                this.set(route, pathname, query, as, Object.assign({}, routeInfo, { hash }));\n                if (error) {\n                    Router.events.emit('routeChangeError', error, as);\n                    throw error;\n                }\n                Router.events.emit('routeChangeComplete', as);\n                return resolve(true);\n            }, reject);\n        });\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            // @ts-ignore method should always exist on history\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            // @ts-ignore method should always exist on history\n            window.history[method]({\n                url,\n                as,\n                options,\n            }, null, as);\n        }\n    }\n    getRouteInfo(route, pathname, query, as, shallow = false) {\n        const cachedRouteInfo = this.components[route];\n        // If there is a shallow route transition possible\n        // If the route is already rendered on the screen.\n        if (shallow && cachedRouteInfo && this.route === route) {\n            return Promise.resolve(cachedRouteInfo);\n        }\n        return new Promise((resolve, reject) => {\n            if (cachedRouteInfo) {\n                return resolve(cachedRouteInfo);\n            }\n            this.fetchComponent(route).then(Component => resolve({ Component }), reject);\n        })\n            .then((routeInfo) => {\n            const { Component } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            return new Promise((resolve, reject) => {\n                // we provide AppTree later so this needs to be `any`\n                this.getInitialProps(Component, {\n                    pathname,\n                    query,\n                    asPath: as,\n                }).then(props => {\n                    routeInfo.props = props;\n                    this.components[route] = routeInfo;\n                    resolve(routeInfo);\n                }, reject);\n            });\n        })\n            .catch(err => {\n            return new Promise(resolve => {\n                if (err.code === 'PAGE_LOAD_ERROR') {\n                    // If we can't load the page it could be one of following reasons\n                    //  1. Page doesn't exists\n                    //  2. Page does exist in a different zone\n                    //  3. Internal error while loading the page\n                    // So, doing a hard reload is the proper way to deal with this.\n                    window.location.href = as;\n                    // Changing the URL doesn't block executing the current code path.\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\n                    err.cancelled = true;\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                if (err.cancelled) {\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                resolve(this.fetchComponent('/_error').then(Component => {\n                    const routeInfo = { Component, err };\n                    return new Promise(resolve => {\n                        this.getInitialProps(Component, {\n                            err,\n                            pathname,\n                            query,\n                        }).then(props => {\n                            routeInfo.props = props;\n                            routeInfo.error = err;\n                            resolve(routeInfo);\n                        }, gipErr => {\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\n                            routeInfo.error = err;\n                            routeInfo.props = {};\n                            resolve(routeInfo);\n                        });\n                    });\n                }));\n            });\n        });\n    }\n    set(route, pathname, query, as, data) {\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n    beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n     * Prefetch `page` code, you may wait for the data during `page` rendering.\n     * This feature only works in production!\n     * @param url of prefetched `page`\n     */\n    prefetch(url) {\n        return new Promise((resolve, reject) => {\n            const { pathname, protocol } = url_1.parse(url);\n            if (!pathname || protocol) {\n                if (process.env.NODE_ENV !== 'production') {\n                    throw new Error(`Invalid href passed to router: ${url} https://err.sh/zeit/next.js/invalid-href-passed`);\n                }\n                return;\n            }\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (process.env.NODE_ENV !== 'production')\n                return;\n            // @ts-ignore pathname is always defined\n            const route = toRoute(pathname);\n            this.pageLoader.prefetch(route).then(resolve, reject);\n        });\n    }\n    async fetchComponent(route) {\n        let cancelled = false;\n        const cancel = (this.clc = () => {\n            cancelled = true;\n        });\n        const Component = await this.pageLoader.loadPage(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        return Component;\n    }\n    async getInitialProps(Component, ctx) {\n        let cancelled = false;\n        const cancel = () => {\n            cancelled = true;\n        };\n        this.clc = cancel;\n        const { Component: App } = this.components['/_app'];\n        let props;\n        if (Component.__NEXT_SPR) {\n            let status;\n            // pathname should have leading slash\n            let { pathname } = url_1.parse(ctx.asPath || ctx.pathname);\n            pathname = !pathname || pathname === '/' ? '/index' : pathname;\n            props = await fetch(\n            // @ts-ignore __NEXT_DATA__\n            `/_next/data/${__NEXT_DATA__.buildId}${pathname}.json`)\n                .then(res => {\n                if (!res.ok) {\n                    status = res.status;\n                    throw new Error('failed to load prerender data');\n                }\n                return res.json();\n            })\n                .catch((err) => {\n                console.error(`Failed to load data`, status, err);\n                window.location.href = pathname;\n                return new Promise(() => { });\n            });\n        }\n        else {\n            const AppTree = this._wrapApp(App);\n            ctx.AppTree = AppTree;\n            props = await utils_1.loadGetInitialProps(App, {\n                AppTree,\n                Component,\n                router: this,\n                ctx,\n            });\n        }\n        if (cancel === this.clc) {\n            this.clc = null;\n        }\n        if (cancelled) {\n            const err = new Error('Loading initial props cancelled');\n            err.cancelled = true;\n            throw err;\n        }\n        return props;\n    }\n    abortComponentLoad(as) {\n        if (this.clc) {\n            const e = new Error('Route Cancelled');\n            e.cancelled = true;\n            Router.events.emit('routeChangeError', e, as);\n            this.clc();\n            this.clc = null;\n        }\n    }\n    notify(data) {\n        this.sub(data, this.components['/_app'].Component);\n    }\n}\nRouter.events = mitt_1.default();\nexports.default = Router;\n"]},"metadata":{},"sourceType":"script"}